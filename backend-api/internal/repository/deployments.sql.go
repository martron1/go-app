// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: deployments.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const deleteDeployment = `-- name: DeleteDeployment :exec
UPDATE deployments SET is_deleted = TRUE, updated_at = now() WHERE id = $1
`

func (q *Queries) DeleteDeployment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDeployment, id)
	return err
}

const findAllDeployments = `-- name: FindAllDeployments :many
SELECT id, application_id, name, created_at, updated_at, is_deleted FROM deployments WHERE is_deleted = FALSE
`

func (q *Queries) FindAllDeployments(ctx context.Context) ([]Deployment, error) {
	rows, err := q.db.Query(ctx, findAllDeployments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.ApplicationID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDeploymentByID = `-- name: FindDeploymentByID :one
SELECT id, application_id, name, created_at, updated_at, is_deleted FROM deployments WHERE id = $1 AND is_deleted = FALSE
`

func (q *Queries) FindDeploymentByID(ctx context.Context, id uuid.UUID) (Deployment, error) {
	row := q.db.QueryRow(ctx, findDeploymentByID, id)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const findDeploymentsByApplicationID = `-- name: FindDeploymentsByApplicationID :many
SELECT id, application_id, name, created_at, updated_at, is_deleted FROM deployments WHERE application_id = $1 AND is_deleted = FALSE
`

func (q *Queries) FindDeploymentsByApplicationID(ctx context.Context, applicationID uuid.UUID) ([]Deployment, error) {
	rows, err := q.db.Query(ctx, findDeploymentsByApplicationID, applicationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.ApplicationID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDeployment = `-- name: InsertDeployment :one
INSERT INTO deployments (
    id, application_id, name
) VALUES (
    $1, $2, $3
) RETURNING id, application_id, name, created_at, updated_at, is_deleted
`

type InsertDeploymentParams struct {
	ID            uuid.UUID `json:"id"`
	ApplicationID uuid.UUID `json:"application_id"`
	Name          string    `json:"name"`
}

func (q *Queries) InsertDeployment(ctx context.Context, arg InsertDeploymentParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, insertDeployment, arg.ID, arg.ApplicationID, arg.Name)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateDeployment = `-- name: UpdateDeployment :one
UPDATE deployments SET
    application_id = $2,
    name = $3,
    updated_at = now()
WHERE id = $1 AND is_deleted = FALSE
RETURNING id, application_id, name, created_at, updated_at, is_deleted
`

type UpdateDeploymentParams struct {
	ID            uuid.UUID `json:"id"`
	ApplicationID uuid.UUID `json:"application_id"`
	Name          string    `json:"name"`
}

func (q *Queries) UpdateDeployment(ctx context.Context, arg UpdateDeploymentParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, updateDeployment, arg.ID, arg.ApplicationID, arg.Name)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
