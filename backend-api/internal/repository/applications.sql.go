// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: applications.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const deleteApplication = `-- name: DeleteApplication :exec
UPDATE applications SET is_deleted = TRUE, updated_at = now() WHERE id = $1
`

func (q *Queries) DeleteApplication(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteApplication, id)
	return err
}

const findAllApplications = `-- name: FindAllApplications :many
SELECT id, name, user_id, created_at, updated_at, is_deleted FROM applications WHERE is_deleted = FALSE
`

func (q *Queries) FindAllApplications(ctx context.Context) ([]Application, error) {
	rows, err := q.db.Query(ctx, findAllApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findApplicationByID = `-- name: FindApplicationByID :one
SELECT id, name, user_id, created_at, updated_at, is_deleted FROM applications WHERE id = $1 AND is_deleted = FALSE
`

func (q *Queries) FindApplicationByID(ctx context.Context, id uuid.UUID) (Application, error) {
	row := q.db.QueryRow(ctx, findApplicationByID, id)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const findApplicationsByUserID = `-- name: FindApplicationsByUserID :many
SELECT id, name, user_id, created_at, updated_at, is_deleted FROM applications WHERE user_id = $1 AND is_deleted = FALSE
`

func (q *Queries) FindApplicationsByUserID(ctx context.Context, userID uuid.UUID) ([]Application, error) {
	rows, err := q.db.Query(ctx, findApplicationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertApplication = `-- name: InsertApplication :one
INSERT INTO applications (
    id, name, user_id
) VALUES (
    $1, $2, $3
) RETURNING id, name, user_id, created_at, updated_at, is_deleted
`

type InsertApplicationParams struct {
	ID     uuid.UUID `json:"id"`
	Name   string    `json:"name"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) InsertApplication(ctx context.Context, arg InsertApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, insertApplication, arg.ID, arg.Name, arg.UserID)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateApplication = `-- name: UpdateApplication :one
UPDATE applications SET
    name = $2,
    user_id = $3,
    updated_at = now()
WHERE id = $1 AND is_deleted = FALSE
RETURNING id, name, user_id, created_at, updated_at, is_deleted
`

type UpdateApplicationParams struct {
	ID     uuid.UUID `json:"id"`
	Name   string    `json:"name"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, updateApplication, arg.ID, arg.Name, arg.UserID)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
