// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: player.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const findAllPlayers = `-- name: FindAllPlayers :many
SELECT id, username, email, created_at, updated_at FROM player
`

func (q *Queries) FindAllPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.Query(ctx, findAllPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPlayer = `-- name: InsertPlayer :exec
INSERT INTO player (id, username, email) VALUES ($1, $2, $3)
`

type InsertPlayerParams struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
}

func (q *Queries) InsertPlayer(ctx context.Context, arg InsertPlayerParams) error {
	_, err := q.db.Exec(ctx, insertPlayer, arg.ID, arg.Username, arg.Email)
	return err
}
