// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: configuration-values.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const deleteConfigurationValue = `-- name: DeleteConfigurationValue :exec
UPDATE configuration_values SET is_deleted = TRUE, updated_at = now() WHERE id = $1
`

func (q *Queries) DeleteConfigurationValue(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteConfigurationValue, id)
	return err
}

const findAllConfigurationValues = `-- name: FindAllConfigurationValues :many
SELECT id, deployment_id, key, value, created_at, updated_at, is_deleted FROM configuration_values WHERE is_deleted = FALSE
`

func (q *Queries) FindAllConfigurationValues(ctx context.Context) ([]ConfigurationValue, error) {
	rows, err := q.db.Query(ctx, findAllConfigurationValues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ConfigurationValue
	for rows.Next() {
		var i ConfigurationValue
		if err := rows.Scan(
			&i.ID,
			&i.DeploymentID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findConfigurationValueByID = `-- name: FindConfigurationValueByID :one
SELECT id, deployment_id, key, value, created_at, updated_at, is_deleted FROM configuration_values WHERE id = $1 AND is_deleted = FALSE
`

func (q *Queries) FindConfigurationValueByID(ctx context.Context, id uuid.UUID) (ConfigurationValue, error) {
	row := q.db.QueryRow(ctx, findConfigurationValueByID, id)
	var i ConfigurationValue
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const findConfigurationValuesByDeploymentID = `-- name: FindConfigurationValuesByDeploymentID :many
SELECT id, deployment_id, key, value, created_at, updated_at, is_deleted FROM configuration_values WHERE deployment_id = $1 AND is_deleted = FALSE
`

func (q *Queries) FindConfigurationValuesByDeploymentID(ctx context.Context, deploymentID uuid.UUID) ([]ConfigurationValue, error) {
	rows, err := q.db.Query(ctx, findConfigurationValuesByDeploymentID, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ConfigurationValue
	for rows.Next() {
		var i ConfigurationValue
		if err := rows.Scan(
			&i.ID,
			&i.DeploymentID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertConfigurationValue = `-- name: InsertConfigurationValue :one
INSERT INTO configuration_values (
    id, deployment_id, key, value
) VALUES (
    $1, $2, $3, $4
) RETURNING id, deployment_id, key, value, created_at, updated_at, is_deleted
`

type InsertConfigurationValueParams struct {
	ID           uuid.UUID `json:"id"`
	DeploymentID uuid.UUID `json:"deployment_id"`
	Key          string    `json:"key"`
	Value        string    `json:"value"`
}

func (q *Queries) InsertConfigurationValue(ctx context.Context, arg InsertConfigurationValueParams) (ConfigurationValue, error) {
	row := q.db.QueryRow(ctx, insertConfigurationValue,
		arg.ID,
		arg.DeploymentID,
		arg.Key,
		arg.Value,
	)
	var i ConfigurationValue
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateConfigurationValue = `-- name: UpdateConfigurationValue :one
UPDATE configuration_values SET
    deployment_id = $2,
    key = $3,
    value = $4,
    updated_at = now()
WHERE id = $1 AND is_deleted = FALSE
RETURNING id, deployment_id, key, value, created_at, updated_at, is_deleted
`

type UpdateConfigurationValueParams struct {
	ID           uuid.UUID `json:"id"`
	DeploymentID uuid.UUID `json:"deployment_id"`
	Key          string    `json:"key"`
	Value        string    `json:"value"`
}

func (q *Queries) UpdateConfigurationValue(ctx context.Context, arg UpdateConfigurationValueParams) (ConfigurationValue, error) {
	row := q.db.QueryRow(ctx, updateConfigurationValue,
		arg.ID,
		arg.DeploymentID,
		arg.Key,
		arg.Value,
	)
	var i ConfigurationValue
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}
